#include<stdio.h>
#include<string.h>

int top = -1;


//used in the stack
void push(char *arr, char x)
{
	top = top + 1;
	arr[top] = x;
}


//used in the stack
char pop(char *arr)
{
	if(top == -1)
	{
		printf("\nstack underflow\n");
		return -1;
	}
	char var;
	var = arr[top];
	top = top - 1;
	return var;
}


//used in postfix and prefix functions
int precedence(char a)
{
	if(a == '^')
		return 2;
	if(a == '*' || a == '/')
		return 1;
	if(a == '+' || a == '-')
		return 0;
	else
		return -1;
}


//checks if a character is an operator or not.
int isoperator(char c)
{
	if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^')
		return 1;
	else
		return 0;
}


//function will return 1 if the given infix expression is valid, otherwise it will return 0
int validinfix(char *s, int size)
{
	char arr[size];
	int i,k=0;
	char element;
	
	char infixstack[size];
	
	for(i = 0; i<size; i++)                          //checking if the parenthesis are matching or not
	{
		if(s[i] == '(')
		{
			push(infixstack,s[i]);
		}
		if(s[i] == ')')
		{
			element = pop(infixstack);
			if(element != '(')
			{
				printf("\nThe infix expression is Invalid\n");
				return 0;
			}
		}
	}
	if(top != -1)
	{
		printf("\nThe infix expression is Invalid\n");
		top = -1;
		return 0;
	}
	
	for(i = 0; i<size; i++)
	{
		if(s[i] != '(' && s[i] != ')')
		{
			arr[k] = s[i];
			k +=1;
		}
	}
	if(isoperator(arr[0]) == 1)
	{
		printf("\nThe infix expression is Invalid\n");
		return 0;
	}
	if(isoperator(arr[k-1]) == 1)
	{
		printf("\nThe infix expression is Invalid\n");
		return 0;
	}
	for(i = 1; i<k-1; i++)                                                       //checking if each operator is between two operands.
	{
		if(isoperator(arr[i]) == 1)
		{
			if(isoperator(arr[i-1]) != 1 && isoperator(arr[i+1]) != 1)
				continue;
			else
			{
				printf("\nThe infix expression is Invalid\n");
				return 0;
			}
		}
		else
		{
			if(isoperator(arr[i-1]) == 1 && isoperator(arr[i+1]) == 1)
				continue;
			else
			{
				printf("\nThe infix expression is Invalid\n");
				return 0;
			}
		}

	}
printf("\nThe infix expression is valid\n");
return 1;
}



//converts a valid infix to a postfix expression
void infixtopostfix(char arr[],int size)
{
	char stack[size], result[size];
	int i,n = size,k =0;

	for(i = 0; i<n; i++)
	{
		if((arr[i]>= 'A' && arr[i]<= 'Z') || (arr[i]>='a' && arr[i]<='z'))
		{
			result[k] = arr[i];
			k = k+1;
		}
		else if(arr[i] == '(')
		{
			push(stack,arr[i]);
		}
		else if(arr[i] == ')')
		{
			while(top != -1 && stack[top] != '(')
			{
				result[k] = pop(stack);
				k = k+1;
			}
			if(top != -1)
				pop(stack);
		}
		else
		{
			while(top != -1 && precedence(stack[top])>=precedence(arr[i]))
			{
				result[k] = pop(stack);
				k = k+1;
			}	
			push(stack,arr[i]);
		}
	}
	while(top != -1)
	{
		result[k] = pop(stack);
		k = k+1;	
	}	
	printf("%s",result);	
}


//uses the same loop as infixtopostfix to make the job easier.
void infixtoprefix(char arr[],int size)
{
	char dummy[size],i;
	
	for(i = 0; i<size; i++)                                                               //reversing the array
	{
		if(arr[size-1 -i] == '(')
		{
			dummy[i] = ')';
			continue;
		}
		if(arr[size-1 -i]==')')
		{
			dummy[i] = '(';
			continue;
		}
		dummy[i] = arr[size-1 - i];
	}
	char stack[size], result[size];
	int n = size,k =0;

	for(i = 0; i<n; i++)                                                                 //same loop as postfix
	{
		if((dummy[i]>= 'A' && dummy[i]<= 'Z') || (dummy[i]>='a' && dummy[i]<='z'))
		{
			result[k] = dummy[i];
			k = k+1;
		}
		else if(dummy[i] == '(')
		{
			push(stack,dummy[i]);
		}
		else if(dummy[i] == ')')
		{
			while(top != -1 && stack[top] != '(')
			{
				result[k] = pop(stack);
				k = k+1;
			}
			if(top != -1)
				pop(stack);
		}
		else
		{
			while(top != -1 && precedence(stack[top])>=precedence(dummy[i]))
			{
				result[k] = pop(stack);
				k = k+1;
			}	
			push(stack,dummy[i]);
		}
	}
	while(top != -1)
	{
		result[k] = pop(stack);
		k = k+1;	
	}
	
	for(i = 0; i<size; i++)                                                      //reversing the array again
	{
		if(result[size-1 -i] == '(')
		{
			dummy[i] = ')';
			continue;
		}
		else if(result[size-1 -i]==')')
		{
			dummy[i] = '(';
			continue;
		}
		else
		{
			dummy[i] = result[size-1 - i];
		}
	}
	for(i = 0; i<size;i++)                                              //printing the result.
		printf("%c",dummy[i]);

}

void main()
{
	int i,n,k=0;
	char x;
	
	printf("Enter the size of the expression \n");
	scanf("%d",&n);
	
	char arr[n];
	
	printf("enter the expression \n");
	scanf("%s",arr);
	
	
	i = validinfix(arr,n);         //the expression is converted only if it is valid.
	
	if(i == 1)
	{
		printf("\nThe infix to postfix expression is : ");
		infixtopostfix(arr,n);
		printf("\n");
		
		printf("\nThe infix to prefix expression is : ");
		infixtoprefix(arr,n);
		printf("\n");
		
	}
	else
	{
		printf("Invalid infix expression\n");
	}
}
