#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define REMOVED -2000000
#define EMPTY 2000000

//checks whether table is full. required during insertion
int isfull(int h[],int hashsize)
{
	int i;
	for(i = 0; i<hashsize; i++)
	{
		if(h[i] == EMPTY)
			return 0;
	}
	return 1;
}


//this function is used in findprime function.
int isprime(int x)
{
	int i;
	int n = ceil(sqrt((double)(x)));
	for(i = 2; i<n; i++)
	{
		if(x%i == 0)
			return 0;		
	}
	return 1;
}


//this function is used for secondary hash function.
int findprime(int x)
{
	int i;
	for(i = x-1; i>0; i--)
	{
		if((isprime(i)))
			return i;
	}
}

//function to insert elements
void insert(int h[],int key,int hashsize)
{
	if(isfull(h,hashsize))
	{
		printf("The hashtable is full\n");
		return;
	}
	
	int i=0,index;
	int y = findprime(hashsize);
	int hash_key = key%hashsize;
	int hash_func = y - (key%y);
	
	while(1)
	{
		index = (hash_key + i*hash_func)%hashsize;
		
		if(h[index] == EMPTY || h[index] == REMOVED)
		{
		
			h[index] = key;
			break;
		}
		i = i+1;
	}
}

//function to search elements
int search(int h[],int key,int hashsize)
{
	
	int i = 0,index,flag;
	int y = findprime(hashsize);
	int hash_key = key%hashsize;
	int hash_func = y - (key%y);
	
	while(h[(hash_key + i*hash_func)%hashsize]!= key)
	{
		if(h[(hash_key + i*hash_func)%hashsize] == EMPTY)
		{
			printf("The key is not present\n");
			return -1;
		}	
		i = i + 1;
	}
	index = (hash_key + i*hash_func)%hashsize;
	printf("Found at index %d\n",index);
	return index;
}

//function to delete elements
void delete(int h[],int key,int hashsize)
{
	int index = search(h,key,hashsize);
	if(index != -1)
	{
		h[index] = REMOVED;
		printf("Key deleted from index %d\n",index);
	}
}



//function to display the hashtable
void display(int h[],int hashsize)
{
	int i ;
	for(i = 0; i<hashsize; i++)
	{
		if(h[i] == EMPTY || h[i] == REMOVED)
			printf("EMPTY ");
		else
			printf("%d ",h[i]);
	}
	printf("\n");
}


//main driver function
int main()
{
	int n,i,flag,z=0,lf;
	int key;
	printf("Enter the size of the hash table\n");
	scanf("%d",&n);
	int hash[n];
	
	for(i = 0; i<n; i++)
		hash[i] = EMPTY;	
		
	printf("\nTo Insert : Press 1	To Search : Press 2	To Delete : Press 3	Loadfactor : Press 4	Display : Press 5	Exit : Press 0\n");
	z = scanf("%d",&flag);
	if(z == 0)
	{
		printf("Enter valid input\n");
		return 0;
	}
	while(flag)
	{
		if(flag == 1)
		{
			printf("Enter the key you want to insert\n");
			scanf("%d",&key);
			insert(hash,key,n);
		}
		if(flag == 2)
		{
			printf("Enter the key you want to search\n");
			scanf("%d",&key);
			search(hash,key,n);
		}
		if(flag == 3)
		{
			printf("Enter the key you want to delete\n");
			scanf("%d",&key);
			delete(hash,key,n);
		}
		if(flag == 4)
		{
			lf = n*0.75;
			printf("Loadfactor is %d\n",lf);
		}
		if(flag == 5)
		{
			printf("The hashtable is : ");
			display(hash,n);
		}
		
		printf("\nTo Insert : Press 1	To Search : Press 2	To Delete : Press 3	Loadfactor : Press 4	Display : Press 5	Exit : Press 0\n");
		z = scanf("%d",&flag);
		if(z == 0)
		{
			printf("Enter valid input\n");
			return 0;
		}
	}
return 0;
}
